package NetflixProject;

public class Merge {


	public static double[] fancySort(double[] arr, int i1, int i2) {
		
		
	if(i2-i1==1) {
		// return 'sorted' array length 1
		double[] sorted= new double[1];
		sorted[0]=arr[i1];
		
		return sorted;
	}
	
	else {
		
		int h  = (i2-i1)/2;
		//Sort first half of array
		double[] sorted1= fancySort(arr, i1,  i1+h);
		// Sort the second half
		double[] sorted2= fancySort(arr, i1+h,  i2);
		// Merge these two arrays in function:
		return merge(sorted1, sorted2);
		
		
	}
		
		
		
		
	}

	private static double[] merge(double[] sorted1, double[] sorted2) {
		
		int len1 = sorted1.length;
		int len2 = sorted2.length;
		// 2 Q- how do we know already in order and diff len?
		
		double[] merged  = new double[len1 + len2];
		// Creating a new array is expensive
		
		
		int count1=0;
		int count2=0;
		int count3=0;
		
		
		
		while(count1 < len1 || count2 < len2) {
			
			if(count1 == len1) {
				merged[ count3++] = sorted2[ count2];
				count2++;
			}
			else if(count2 == len2) {
				merged[ count3++] = sorted1[ count1];
				count1++;
			}
			else if(sorted1[count1] < sorted2[count2]) {  //comparator.compare(a,b)
				merged[ count3++ ]= sorted1[ count1 ];
				count1++;
				
			}
			else {
				merged[ count3++ ]= sorted2[ count2 ];	
				count2++;
			}
			
			
		}
		
		
		return merged;
	}
	
}
